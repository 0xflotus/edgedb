##
# Copyright (c) 2008-2010 Sprymix Inc.
# All rights reserved.
#
# See LICENSE for details.
##


%SCHEMA semantix.caos.datasources.schemas.Sql
%NAME TableColumns
---
params:
    table_name:
        type: str
    schema_name:
        type: str
        default: "public"

filters:
    - format: dict

source: |
        SELECT
                a.attname                               AS column_name,
                format_type(t.oid, a.atttypmod)         AS column_type,
                tns.nspname                             AS column_type_schema,
                t.oid                                   AS column_type_oid,
                a.attnotnull                            AS column_required,
                pg_get_expr(def.adbin, c.oid, true)     AS column_default
            FROM
                pg_class c
                INNER JOIN pg_namespace ns ON c.relnamespace = ns.oid
                INNER JOIN pg_attribute a ON c.oid = a.attrelid
                INNER JOIN pg_type t ON a.atttypid = t.oid
                INNER JOIN pg_namespace tns ON t.typnamespace = tns.oid
                LEFT JOIN pg_attrdef def ON def.adrelid = c.oid AND def.adnum = a.attnum
            WHERE
                c.relname = %(table_name)s
                AND ns.nspname = %(schema_name)s
                AND a.attnum > 0
            ORDER BY
                a.attnum
...

%SCHEMA semantix.caos.datasources.schemas.Sql
%NAME TableInheritance
---
params:
    table_name:
        type: str
    schema_name:
        type: str
        default: "public"
    max_depth:
        type: int
        default: null

source: |
        SELECT
                *
            FROM
                (WITH RECURSIVE inheritance(oid, name, ns, depth, pos, path) AS (
                        SELECT
                                c.oid,
                                c.relname,
                                ns.nspname,
                                0,
                                0,
                                ARRAY[c.relname]
                            FROM
                                pg_class c
                                INNER JOIN pg_namespace ns ON c.relnamespace = ns.oid
                            WHERE
                                c.relname = %(table_name)s
                                AND ns.nspname = %(schema_name)s
                      UNION ALL
                        SELECT
                                c.oid,
                                c.relname,
                                ns.nspname,
                                i.depth + 1,
                                pgi.inhseqno AS pos,
                                i.path || c.relname
                            FROM
                                pg_class c,
                                inheritance i,
                                pg_inherits pgi,
                                pg_namespace ns
                            WHERE
                                i.oid = pgi.inhrelid
                                AND c.oid = pgi.inhparent
                                AND ns.oid = c.relnamespace
                                AND (%(max_depth)s::int IS NULL OR i.depth < %(max_depth)s::int)
                )
                SELECT DISTINCT ON (name, ns) name, ns, depth, pos FROM inheritance) q
            ORDER BY
                depth, pos
...

%SCHEMA semantix.caos.datasources.schemas.Sql
%NAME TableList
---
params:
    schema_name:
        type: str
        default: "public"
    table_pattern:
        type: str

filters:
    - format: dict

source: |
        SELECT
                c.oid                                 AS oid,
                c.relname                             AS name,
                ns.nspname                            AS schema
            FROM
                pg_class AS c
                INNER JOIN pg_namespace AS ns ON ns.oid = c.relnamespace
            WHERE
                --
                -- Limit the schema scope
                --
                ns.nspname LIKE %(schema_name)s
                --
                -- Only specified tables
                --
                AND c.relname LIKE %(table_pattern)s
                --
                -- And only real tables
                --
                AND c.relkind = 'r'
