##
# Copyright (c) 2008-2010 Sprymix Inc.
# All rights reserved.
#
# See LICENSE for details.
##


%SCHEMA metamagic.caos.datasources.schemas.Sql
%NAME TableColumns
---
params:
    table_name:
        type: str
    schema_name:
        type: str
        default: "public"
    include_inherited:
        type: bool
        default: True

filters:
    - format: dict

source: |
        SELECT
                ns.nspname                              AS table_schema,
                c.relname                               AS table_name,
                a.attname                               AS column_name,
                t.typname                               AS column_type,
                format_type(t.oid, a.atttypmod)         AS column_type_formatted,
                tns.nspname                             AS column_type_schema,
                t.oid                                   AS column_type_oid,
                a.attnotnull                            AS column_required,
                pg_get_expr(def.adbin, c.oid, true)     AS column_default,
                a.attislocal                            AS column_is_local,
                a.attinhcount                           AS column_ancestors,
                cmt.description                         AS column_comment
            FROM
                pg_class c
                INNER JOIN pg_namespace ns ON c.relnamespace = ns.oid
                INNER JOIN pg_attribute a ON c.oid = a.attrelid
                INNER JOIN pg_type t ON a.atttypid = t.oid
                INNER JOIN pg_namespace tns ON t.typnamespace = tns.oid
                LEFT JOIN pg_attrdef def ON def.adrelid = c.oid AND def.adnum = a.attnum
                LEFT JOIN pg_description cmt ON (cmt.objoid = c.oid AND cmt.objsubid = a.attnum)
            WHERE
                ns.nspname LIKE %(schema_name)s::text
                AND (%(table_name)s::text IS NULL OR c.relname LIKE %(table_name)s::text)
                AND a.attnum > 0
                AND (%(include_inherited)s::bool OR a.attislocal)
            ORDER BY
                a.attnum
...

%SCHEMA metamagic.caos.datasources.schemas.Sql
%NAME TableInheritance
---
params:
    table_name:
        type: str
    schema_name:
        type: str
        default: "public"
    max_depth:
        type: int
        default: null

source: |
        SELECT
                *
            FROM
                (WITH RECURSIVE inheritance(oid, name, ns, depth, pos, path) AS (
                        SELECT
                                c.oid,
                                c.relname,
                                ns.nspname,
                                0,
                                0,
                                ARRAY[c.relname]
                            FROM
                                pg_class c
                                INNER JOIN pg_namespace ns ON c.relnamespace = ns.oid
                            WHERE
                                c.relname = %(table_name)s
                                AND ns.nspname = %(schema_name)s
                      UNION ALL
                        SELECT
                                c.oid,
                                c.relname,
                                ns.nspname,
                                i.depth + 1,
                                pgi.inhseqno AS pos,
                                i.path || c.relname
                            FROM
                                pg_class c,
                                inheritance i,
                                pg_inherits pgi,
                                pg_namespace ns
                            WHERE
                                i.oid = pgi.inhrelid
                                AND c.oid = pgi.inhparent
                                AND ns.oid = c.relnamespace
                                AND (%(max_depth)s::int IS NULL OR i.depth < %(max_depth)s::int)
                )
                SELECT DISTINCT ON (ns, name) ns, name, depth, pos FROM inheritance) q
            ORDER BY
                depth, pos
...

%SCHEMA metamagic.caos.datasources.schemas.Sql
%NAME TableList
---
params:
    schema_name:
        type: str
        default: "public"
    table_pattern:
        type: str

filters:
    - format: dict

source: |
        SELECT
                c.oid                                 AS oid,
                typ.oid                               AS typoid,
                c.relname                             AS name,
                ns.nspname                            AS schema,
                cmt.description                       AS comment
            FROM
                pg_class AS c
                INNER JOIN pg_namespace AS ns ON ns.oid = c.relnamespace
                INNER JOIN pg_type AS typ ON typ.typrelid = c.oid
                LEFT JOIN pg_description AS cmt ON (cmt.objoid = c.oid AND cmt.objsubid = 0)
            WHERE
                --
                -- Limit the schema scope
                --
                ns.nspname LIKE %(schema_name)s
                --
                -- Only specified tables
                --
                AND c.relname LIKE %(table_pattern)s
                --
                -- And only real tables
                --
                AND c.relkind = 'r'
...

%SCHEMA metamagic.caos.datasources.schemas.Sql
%NAME TableIndexes
---
params:
    schema_pattern:
        type: str
        default: null
    table_pattern:
        type: str
        default: null
    index_pattern:
        type: str
        default: null

filters:
    - format: dict

source: |
        SELECT
                i.table_name                            AS table_name,
                array_agg(i.index_name)::text[]         AS index_names,
                array_agg(i.index_predicate)::text[]    AS index_predicates,
                array_agg(i.index_expression)::text[]   AS index_expressions,
                array_agg(i.index_columns)              AS index_columns
        FROM
            (SELECT
                    ARRAY[ns.nspname, c.relname]                AS table_name,
                    ic.relname::text                            AS index_name,
                    pg_get_expr(i.indpred, i.indrelid)::text    AS index_predicate,
                    pg_get_expr(i.indexprs, i.indrelid)::text   AS index_expression,
                    string_agg(ia.attname::text, '~~~~' ORDER BY ia.attnum) AS index_columns
                FROM
                    pg_class AS c
                    INNER JOIN pg_namespace AS ns ON ns.oid = c.relnamespace
                    INNER JOIN pg_index AS i ON i.indrelid = c.oid
                    INNER JOIN pg_class AS ic ON i.indexrelid = ic.oid
                    LEFT JOIN pg_attribute AS ia ON ia.attrelid = i.indexrelid
                WHERE
                    (%(schema_pattern)s::text IS NULL OR ns.nspname LIKE %(schema_pattern)s::text)
                    AND (%(table_pattern)s::text IS NULL OR c.relname LIKE %(table_pattern)s::text)
                    AND (%(index_pattern)s::text IS NULL OR ic.relname LIKE %(index_pattern)s::text)
                    AND (ia.attnum IS NULL OR ia.attnum >= 1)
                GROUP BY
                    table_name, index_name, index_predicate, index_expression) AS i
            GROUP BY
                i.table_name
...

%SCHEMA metamagic.caos.datasources.schemas.Sql
%NAME TableConstraints
---
params:
    schema_pattern:
        type: str
        default: null
    table_pattern:
        type: str
        default: null
    constraint_pattern:
        type: str
        default: null
    include_inherited:
        type: bool
        default: false

filters:
    - format: dict

source: |
    SELECT
        c.table_name                        AS table_name,
        array_agg(c.constraint_id)          AS constraint_ids,
        array_agg(c.constraint_name)        AS constraint_names,
        array_agg(c.constraint_expression)  AS constraint_expressions,
        array_agg(c.constraint_description) AS constraint_descriptions,
        array_agg(c.constraint_columns)     AS constraint_columns
    FROM
        (SELECT
            ARRAY[ns.nspname, cc.relname]           AS table_name,
            c.oid::int                              AS constraint_id,
            c.conname::text                         AS constraint_name,
            pg_get_expr(c.conbin, c.conrelid)::text AS constraint_expression,
            (SELECT
                cmt.description
             FROM
                pg_description AS cmt
                INNER JOIN pg_constraint AS cmtc ON cmtc.oid = cmt.objoid
             WHERE
                cmtc.conname = c.conname
                AND cmtc.coninhcount = 0
                AND cmt.description IS NOT NULL AND cmt.description != ''
             LIMIT 1)                               AS constraint_description,

            string_agg(ia.attname::text, '~~~~' ORDER BY ia.attnum) AS constraint_columns

         FROM
            pg_constraint AS c
            INNER JOIN pg_class AS cc ON c.conrelid = cc.oid
            INNER JOIN pg_namespace AS ns ON ns.oid = cc.relnamespace
            LEFT JOIN pg_attribute AS ia ON ia.attrelid = c.conindid
         WHERE
            (%(schema_pattern)s::text IS NULL OR ns.nspname LIKE %(schema_pattern)s::text)
            AND (%(table_pattern)s::text IS NULL OR cc.relname LIKE %(table_pattern)s::text)
            AND (%(constraint_pattern)s::text IS NULL OR c.conname LIKE %(constraint_pattern)s::text)
            AND (%(include_inherited)s OR c.coninhcount = 0)
         GROUP BY
            table_name, constraint_id, c.conname, constraint_expression
        ) AS c

    GROUP BY
        table_name
...
