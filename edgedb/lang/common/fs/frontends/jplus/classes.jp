/**
 * Copyright (c) 2013-2014 MagicStack Inc.
 *
 * All rights reserved.
 * See LICENSE for details.
 */


export BucketMeta, BaseBucket, BaseFSBackend, BaseFSSystem


from metamagic.utils.lang.jplus import base64, byteutils, crypt, uuid


_bucketIds = {}


class BucketMeta(JType) {
    fn constructor(name, bases, dct) {
        if this.id {
            _bucketIds[this.id.toHex()] = this
        }
        return super.constructor(name, bases, dct)
    }

    static fn getBucketClass(id) {
        id = new uuid.UUID(id)
        bucket = _bucketIds[id.toHex()]
        if !bucket {
            throw new TypeError('unable to find bucket by id: ' + id)
        }
        return bucket
    }
}


class BaseBucket(metaclass=BucketMeta) {
    backends = null

    static fn setBackends(backends) {
        this.backends = backends
    }

    static fn getBackends() {
        mro = this.__mro__
        len = mro.length

        for cls in mro {
            backends = cls.backends
            if backends && backends.length {
                return backends
            }
        }
    }

    static fn getFilePubURL(id, filename=null) {
        backends = this.getBackends()

        if !backends {
            msg = 'Bucket.get_file_pub_url: ' + this.__name__ +
                  ' bucket has no backends set'
            throw new TypeError(msg)
        }

        return backends[0].getFilePubURL(this, id, filename)
    }
}


class BaseFSBackend {
    _FN_LEN_LIMIT = 75

    fn constructor(args) {
        for k in args {
            this[k] = args[k]
        }
    }

    fn escapeFilename(filename) {
        return filename.replace(/[^\w\-\._]/g, '_') \
                       .replace(/^\-\-*/, '').replace(/\-\-*$/, '')
    }

    fn _getBaseName(bucket, id, filename) {
        id = new uuid.UUID(id)

        base = bucket.id.toString()
        newId = base64.b32encode(byteutils.unhexlify(crypt.md5(id.toBytes())))
        baseFilename = id.hex

        if filename {
            filename = baseFilename + '_' + filename
        } else {
            filename = baseFilename
        }

        if filename.length > this._FN_LEN_LIMIT {
            if filename.indexOf('.') > -1 {

                extension = rpartition(filename, '.')[2]
                limit = this._FN_LEN_LIMIT - extension.length - 1

                if limit <= 0 {
                    filename = filename.slice(0, this._FN_LEN_LIMIT)
                } else {
                    filename = filename.slice(0, limit) + '.' + extension
                }
            } else {
                filename = filename.slice(0, this._FN_LEN_LIMIT)
            }

        }

        return base + '/' + newId.slice(0, 2) +
                      '/' + newId.slice(2, 4) +
                      '/' + filename
    }

    fn getFilePubURL(bucket, id, filename=null) {
        if filename {
            filename = this.escapeFilename(filename)
        }
        return this.pub_path + '/' + this._getBaseName(bucket, id, filename)
    }
}


class BaseFSSystem {
    fn constructor(args=null) {
        this.buckets = []
    }

    fn addBucket(bucketCls) {
        this.buckets.push(bucketCls)
    }
}
