##
# Copyright (c) 2008-2010 Sprymix Inc.
# All rights reserved.
#
# See LICENSE for details.
##


code:
    from semantix.caos.caosql.parser.errors import CaosQLSyntaxError
    from semantix.caos.caosql.parser.keywords import caosql_keywords
    from semantix.caos.caosql import ast as qlast

definitions:
    space               "[ \t\n\r]"
    horiz_space         "[ \t]"
    newline             "[\n\r]"
    non_newline         "[^\n\r]"
    comment             "--{non_newline}*"
    whitespace          "{space}+|{comment}"

    special_whitespace      "({space}+|{comment}{newline})"
    horiz_whitespace        "({horiz_space}|{comment})"
    whitespace_with_newline "({horiz_whitespace}*{newline}{special_whitespace}*)"

    quote                   "'"
    quotestop               "{quote}{whitespace}*"
    quotecontinue           "{quote}{whitespace_with_newline}{quote}"
    quotefail               "{quote}{whitespace}*-"

    xqstart                 "{quote}"
    xqdouble                "{quote}{quote}"
    xqinside                "[^']+"

    self                    "[,\(\)\[\].;\:\+\-\*\/\^\<\>\=]"
    op_chars                "[\~\!\#\^\&\|\`\?\+\-\*\/\<\>\=]"
    operator                "{op_chars}+"

# C-style comments
    xcstart                 "\/\*{op_chars}*"
    xcstop                  "\*+\/"
    xcinside                "[^*/]+"

    digit                   "[0-9]"
    ident_start             "[A-Za-z\200-\377_%]"
    ident_cont              "[A-Za-z\200-\377_0-9\$%]"

    identifier              "{ident_start}{ident_cont}*"

    integer                 "{digit}+"
    decimal                 "(({digit}*\.{digit}+)|({digit}+\.{digit}*))"
    decimalfail             "{digit}+\.\."
    real                    "({integer}|{decimal})[Ee][\-\+]?{digit}+"
    realfail1               "({integer}|{decimal})[Ee]"
    realfail2               "({integer}|{decimal})[Ee][\-\+]"

    dir                     "\<\>"
    search                  "\@\@"
    starstar                "\*\*"

    other                   "."


INITIAL:
    "{whitespace}":
        return

    "{xcstart}":
        self.xcdepth = 0
        self.PUSHSTATE(XC)
        self.PUSHBACK(self.value[2:])

    "{xqstart}":
        self.PUSHSTATE(XQ)
        self.string = ''

    "{dir}":
        return self.value

    "{search}":
        return 'OP'

    "{starstar}":
        return '**'

    "{self}":
        return self.value[0]

    "{operator}":
        nchars = len(self.value)
        slashstar = self.value[:2].find('/*')
        dashdash = self.value[:2].find('**')

        if slashstar != -1 and dashdash != -1:
            if slashstar > dashdash:
                slashstar = dashdash
        elif slashstar == -1:
            slashstar = dashdash

        if slashstar != -1:
            nchars = slashstar

        while nchars > 1 and (self.value[nchars - 1] == '+' or self.value[nchars - 1] == '-'):
            for ic in range(0, nchars - 2, -1):
                if self.value[ic] in "~!@#^&|`?%":
                    break

                if ic >= 0:
                    break
                nchars -= 1

        if nchars < len(self.value):
            self.PUSHBACK(self.value[nchars:])
            self.value = self.value[:nchars]

            if nchars == 1 and self.value[0] in ',()[].;:+-*/%^<>=':
                return self.value[0]

        return 'OP'

    "{integer}":
        self.value = int(self.value)
        return 'ICONST'

    "{decimal}":
        return 'FCONST'

    "{decimalfail}":
        self.PUSHBACK(self.value[-2:])
        self.value = int(self.value[:-2])
        return 'ICONST'

    "{real}":
        return 'FCONST'

    "{realfail1}":
        self.PUSHBACK(self.value[-1:])
        self.value = self.value[:-1]
        return 'FCONST'

    "{realfail2}":
        self.PUSHBACK(self.value[-2:])
        self.value = self.value[:-2]
        return 'FCONST'

    "{identifier}":
        kw = caosql_keywords.get(self.value.lower())
        if kw:
            self.value = self.value
            return kw[0]
        else:
            return 'IDENT'

    "{other}":
        return self.value

XC:
    "{xcstart}":
        self.xcdepth += 1
        self.PUSHBACK(self.value[2:])

    "{xcstop}":
        if self.xcdepth <= 0:
            self.PUSHSTATE(INITIAL)
        else:
            self.xcdepth -= 1

    "{xcinside}":
        return

    "{op_chars}":
        return

    "\*+":
        return

    "<<EOF>>":
        raise CaosQLSyntaxError("unterminated /* comment", token=self.token, lineno=self.lineno)

XQ:
    "{quotestop}|{quotefail}":
        if len(self.value) > 1:
            self.PUSHBACK(self.value[1:])
        self.PUSHSTATE(INITIAL)
        self.value = self.string
        return 'SCONST'

    "{xqdouble}":
        self.string += "'"

    "{xqinside}":
        self.string += self.value

    "{quotecontinue}":
        return

    "<<EOF>>":
        raise CaosQLSyntaxError("unterminated quoted string",
                                token=self.token, lineno=self.lineno)
