#
# This source file is part of the EdgeDB open source project.
#
# Copyright 2016-present MagicStack Inc. and the EdgeDB authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


## INTROSPECTION SCHEMA


CREATE MODULE schema;

CREATE MODULE stdattrs;  # standard schema attributes need to be in a separate
                         # module to avoid name conflicts.

# Standard schema item attributes.
CREATE ABSTRACT ATTRIBUTE stdattrs::name std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_abstract std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_final std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_derived std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::is_virtual std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::view_type std::int64;
CREATE ABSTRACT ATTRIBUTE stdattrs::title std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::description std::str;

CREATE ABSTRACT ATTRIBUTE stdattrs::expr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::subjectexpr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::finalexpr std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::errmessage std::str;

CREATE ABSTRACT ATTRIBUTE stdattrs::value std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::required std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::readonly std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::computable std::bool;
CREATE ABSTRACT ATTRIBUTE stdattrs::default std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::expression std::str;

CREATE SCALAR TYPE schema::cardinality_t EXTENDING std::str {
    CREATE CONSTRAINT std::enum ('ONE', 'MANY');
};
CREATE ABSTRACT ATTRIBUTE stdattrs::cardinality schema::cardinality_t;

CREATE ABSTRACT ATTRIBUTE stdattrs::language std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::code std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::from_function std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::initial_value std::str;
CREATE ABSTRACT ATTRIBUTE stdattrs::return_typemod std::str;

CREATE SCALAR TYPE schema::target_delete_action_t EXTENDING std::str {
    CREATE CONSTRAINT std::enum ('RESTRICT', 'DELETE SOURCE', 'SET EMPTY',
                                 'SET DEFAULT', 'DEFERRED RESTRICT');
};

CREATE ABSTRACT ATTRIBUTE stdattrs::on_target_delete
    schema::target_delete_action_t;

CREATE SCALAR TYPE schema::operator_kind_t EXTENDING std::str {
    CREATE CONSTRAINT std::enum ('INFIX', 'POSTFIX', 'PREFIX');
};

CREATE ABSTRACT ATTRIBUTE stdattrs::operator_kind
    schema::operator_kind_t;


# Base type for all schema entities.
CREATE ABSTRACT TYPE schema::Object {
    CREATE REQUIRED PROPERTY schema::name -> std::str;
    CREATE PROPERTY schema::description -> std::str;
};


CREATE TYPE schema::Database EXTENDING schema::Object;


# Base type for all *types*.
CREATE ABSTRACT TYPE schema::Type EXTENDING schema::Object;
CREATE TYPE schema::PseudoType EXTENDING schema::Type;


CREATE TYPE schema::Attribute EXTENDING schema::Object {
    CREATE LINK schema::type -> schema::Type;
};


CREATE ABSTRACT LINK schema::attributes {
    CREATE PROPERTY schema::value -> std::str;
};


ALTER TYPE schema::Object {
    CREATE MULTI LINK schema::attributes -> schema::Attribute;
};


CREATE ABSTRACT LINK std::__type__ {
    SET readonly := True;
};


ALTER TYPE std::Object {
    CREATE LINK std::__type__ -> schema::Type {
        SET readonly := True;
    };
};


CREATE TYPE schema::Module EXTENDING schema::Object;


CREATE ABSTRACT TYPE schema::ContainerType EXTENDING schema::Type;


CREATE TYPE schema::Array EXTENDING schema::ContainerType {
    CREATE REQUIRED LINK schema::element_type -> schema::Type;
    CREATE PROPERTY schema::dimensions -> array<std::int64>;
};


CREATE TYPE schema::TypeElement {
    CREATE REQUIRED LINK schema::type -> schema::Type;
    CREATE REQUIRED PROPERTY schema::num -> std::int64;
    CREATE PROPERTY schema::name -> std::str;
};


CREATE TYPE schema::Tuple EXTENDING schema::ContainerType {
    CREATE REQUIRED MULTI LINK schema::element_types -> schema::TypeElement {
        CREATE CONSTRAINT std::exclusive;
    };
};


CREATE TYPE schema::Delta EXTENDING schema::Object {
    CREATE MULTI LINK schema::parents -> schema::Delta;
};


CREATE ABSTRACT TYPE schema::InheritingObject EXTENDING schema::Object {
    CREATE MULTI LINK schema::bases -> schema::InheritingObject;
    CREATE MULTI LINK schema::mro -> schema::InheritingObject;

    CREATE PROPERTY schema::is_abstract -> std::bool {
        SET default := false;
    };

    CREATE PROPERTY schema::is_final -> std::bool {
        SET default := false;
    };
};


CREATE TYPE schema::Parameter {
    CREATE REQUIRED LINK schema::type -> schema::Type;
    CREATE REQUIRED PROPERTY schema::typemod -> std::str;
    CREATE REQUIRED PROPERTY schema::kind -> std::str;
    CREATE REQUIRED PROPERTY schema::num -> std::int64;
    CREATE PROPERTY schema::name -> std::str;
    CREATE PROPERTY schema::default -> std::str;
};


CREATE ABSTRACT LINK schema::args {
    CREATE PROPERTY schema::value -> std::str;
};


CREATE ABSTRACT TYPE schema::CallableObject extending schema::Object {

    CREATE MULTI LINK schema::params -> schema::Parameter {
        CREATE CONSTRAINT std::exclusive;
    };

    CREATE LINK schema::return_type -> schema::Type;
    CREATE PROPERTY schema::return_typemod -> std::str;
};


CREATE TYPE schema::Constraint EXTENDING
        (schema::CallableObject, schema::InheritingObject)
{
    CREATE MULTI LINK schema::args -> schema::Parameter {
        CREATE CONSTRAINT std::exclusive;
    };
    CREATE PROPERTY schema::expr -> std::str;
    CREATE PROPERTY schema::subjectexpr -> std::str;
    CREATE PROPERTY schema::finalexpr -> std::str;
    CREATE PROPERTY schema::errmessage -> std::str;
};


CREATE ABSTRACT TYPE schema::ConsistencySubject EXTENDING schema::Object {
    CREATE MULTI LINK schema::constraints -> schema::Constraint {
        CREATE CONSTRAINT std::exclusive;
    };
};


ALTER TYPE schema::Constraint {
    CREATE LINK schema::subject :=
        __source__.<constraints[IS schema::ConsistencySubject];
};


CREATE TYPE schema::SourceIndex EXTENDING schema::Object {
    CREATE PROPERTY schema::expr -> std::str;
};


CREATE ABSTRACT TYPE schema::Source EXTENDING schema::Object {
    CREATE MULTI LINK schema::indexes -> schema::SourceIndex {
        CREATE CONSTRAINT std::exclusive;
    };
};


CREATE ABSTRACT TYPE schema::Pointer EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject) {
    CREATE REQUIRED PROPERTY schema::cardinality -> schema::cardinality_t;
    CREATE REQUIRED PROPERTY schema::required -> std::bool;
};


ALTER TYPE schema::Source {
    CREATE MULTI LINK schema::pointers -> schema::Pointer {
        CREATE CONSTRAINT std::exclusive;
    };
};


CREATE TYPE schema::ScalarType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type) {
    CREATE PROPERTY schema::default -> std::str;
};


CREATE TYPE schema::ObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::UnionObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::DerivedObjectType EXTENDING
        (schema::InheritingObject, schema::ConsistencySubject, schema::Type,
         schema::Source);


CREATE TYPE schema::Link EXTENDING (schema::Pointer, schema::Source);


CREATE TYPE schema::DerivedLink EXTENDING (schema::Pointer, schema::Source);


CREATE TYPE schema::Property EXTENDING schema::Pointer;


ALTER TYPE schema::Pointer {
    CREATE LINK schema::source -> schema::Source;
    CREATE LINK schema::target -> schema::Type;
};


ALTER TYPE schema::Link {
    CREATE LINK schema::properties := __source__.pointers;
    CREATE PROPERTY schema::on_target_delete ->
        schema::target_delete_action_t;
};


ALTER TYPE schema::ObjectType {
    CREATE LINK schema::links :=
        __source__.pointers[IS schema::Link];
    CREATE LINK schema::properties :=
        __source__.pointers[IS schema::Property];
};


CREATE TYPE schema::Function EXTENDING schema::CallableObject;


CREATE TYPE schema::Operator EXTENDING schema::CallableObject {
    CREATE PROPERTY schema::operator_kind -> schema::operator_kind_t;
    CREATE LINK schema::commutator -> schema::Operator;
};


CREATE TYPE schema::Cast EXTENDING schema::Object {
    CREATE LINK schema::from_type -> schema::Type;
    CREATE LINK schema::to_type -> schema::Type;
    CREATE PROPERTY schema::allow_implicit -> std::bool;
    CREATE PROPERTY schema::allow_assignment -> std::bool;
};
